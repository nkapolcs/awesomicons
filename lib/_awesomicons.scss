/////////////////
// AWESOMICONS //
/////////////////


/**
 * Provides a color format conversion from hex to rgb
 * ---------------------------------------------------------------
 * @param   {string}   $hex   [#000]   -   The color in hex format
 * @return  {string}                   -   The color in rgb format
 */
@function _awesomiconsHexToRgbColor($hex: #000) {
  $rgb: '';
  @if (str-length(#{$hex}) == 4 or str-length(#{$hex}) == 7) and (str-index(#{$hex}, '#') != null) {
    @if $hex != #000 and $hex != #000000 {
      $rgb: 'rgb(#{red($hex)},#{green($hex)},#{blue($hex)})';
    }
  } @else {
    @warn 'Invalid argument: the provided color is not in hex format';
  }
  @return $rgb;
}

/**
 * Provides a color replacement on the icon's SVG code
 * -----------------------------------------------------------------------------------------------------
 * @see     Hugo Giraudel's str-replace function
 * @param   {string}   $icon-data               -   The encoded icon's SVG code
 * @param   {string}   $hex            [#000]   -   The hex color to be used as icon's fill/stroke value
 * @return  {string}                            -   The colored icon
 */
@function _awesomiconsSetColor($icon-data, $hex: #000) {
  @if type-of($icon-data) == string {
    $occurrence-start: str-index($icon-data, '{{__AI-COLOR');
    $occurrence-end: str-index($icon-data, '__}}');
    @if $occurrence-start and $occurrence-end {
      @return str-slice($icon-data, 1, $occurrence-start - 1) + _awesomiconsHexToRgbColor($hex) + _awesomiconsSetColor(str-slice($icon-data, $occurrence-end + 4), $hex);
    }
    @return $icon-data;
  } @else {
    @warn 'Missing argument: $icon-data is invalid or not defined';
  }
  @return false;
}

/**
 * Provides a color layer replacement on the icon's SVG code
 * -----------------------------------------------------------------------------------------------------
 * @see     Hugo Giraudel's str-replace function
 * @param   {string}   $icon-data               -   The encoded icon's SVG code
 * @param   {number}   $color-layer             -   The color layer
 * @param   {string}   $hex            [#000]   -   The hex color to be used as icon's fill/stroke value
 * @return  {string}                            -   The colored icon
 */
@function _awesomiconsSetColorLayer($icon-data, $color-layer, $hex: #000) {
  @if type-of($icon-data) == string and type-of($color-layer) == number {
    $placeholder: '{{__AI-COLOR-#{$color-layer}__}}';
    $occurrence-start: str-index($icon-data, $placeholder);
    @if $occurrence-start {
      @return str-slice($icon-data, 1, $occurrence-start - 1) + _awesomiconsHexToRgbColor($hex) + _awesomiconsSetColorLayer(str-slice($icon-data, $occurrence-start + str-length($placeholder)), $color-layer, $hex);
    }
    @return $icon-data;
  } @else {
    @warn 'Missing arguments: $icon-data and/or $color-layer are invalid or not defined';
  }
  @return false;
}

/**
 * Provides a colored icon
 * ----------------------------------------------------------------------------------------------------
 * @param   {string}   $icon-name            -   The name of the target icon
 * @param   {string}   $palette     [#000]   -   The hex colors to be used as icon's fill/stroke values
 * @param   {string}   $format      [null]   -   Specifies the output format of the icon
 * @return  {string}                         -   The colored icon
 */
@function _awesomiconsGetIcon($icon-name, $palette: #000, $format: null) {
  @if map-has-key($awesomicons, $icon-name) {
    $icon-data: map-get($awesomicons, $icon-name);
    // color replacement
    @if type-of($palette) == list {
      @each $hex in $palette {
        $icon-data: _awesomiconsSetColorLayer($icon-data, index($palette, $hex), $hex);
      }
    } @else {
      $icon-data: _awesomiconsSetColor($icon-data, $palette);
    }
    // icon format
    @if $icon-data != false and $format == 'data-uri' {
      $icon-data: 'data:image/svg+xml;charset=utf8,' + $icon-data;
    }
    @return $icon-data;
  } @else {
    @warn 'The "#{$icon-name}" icon does not exist';
  }
  @return false;
}

/**
 * Provides CSS code to set an icon as background image
 * ---------------------------------------------------------------------------------------------------------
 * @param   {string}    $icon-name                    -   The name of the target icon
 * @param   {string}    $palette      [#000]          -   The hex colors to be used as icon's fill/stroke values
 * @param   {number}    $w            [1em]           -   The width of the icon
 * @param   {number}    $h            [1em]           -   The height of the icon
 * @param   {string}    $position     [50% 50%]       -   Overrides background position for a fine-tuned alignment
 * @param   {string}    $background   [transparent]   -   The background color of the icon
 * @param   {string}    $rounded      [false]         -   The border radius of the icon
 */
@mixin awesomicon($icon-name, $palette: #000, $w: 1em, $h: 1em, $position: 50% 50%, $background: transparent, $radius: false) {
  @if type-of($icon-name) == string {
    $icon: _awesomiconsGetIcon($icon-name, $palette, 'data-uri');
    @if $icon != false {
      display: inline-block;
      width: $w;
      height: $h;
      background: {
        image: url($icon);
        size: contain;
        position: #{$position};
        repeat: no-repeat;
        color: $background;
      }
      @if $rounded {
        border-radius: $radius;
      }
    }
  } @else {
    @warn 'Please, provide a valid icon name';
  }
}